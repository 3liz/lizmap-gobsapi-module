{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is a Lizmap module to generate an API for G-Obs","title":"Accueil"},{"location":"CHANGELOG/","text":"Changelog # Unreleased # 0.8.0 - 2024-07-25 # Changed # Compatibility for Lizmap Web Client 3.6 & 3.7 - Remove compatibility for Lizmap Web Client 3.5 Exclude some files from the Composer package Added # User authentication - Allow the use of Basic authentication for /user/login endpoint When using SAML authentication protocol, add synchronization of Roles and SI (feature taken from the old deprecated module gobs) Fixed # Tools - Better errors catchment when executing SQL queries 0.7.0 - 2023-07-25 # Changed # Projects - remove the link between Lizmap projects and G-Obs project & use the project table Observations - Restrict read & write access based on the user accessible project views Added # Plugin Lizmap compatibility - Add a way to get Lizmap Web Client metadata from G-Obs API Fixed # Ensure the entry point gobsapi.php is overwritten on each version upgrade 0.6.0 - 2023-03-27 # Changed # Indicator - Move the dimensions characteristics into a new dedicated table dimension 0.5.1 - 2023-02-21 # Added # Observation - Allow to create an observation by passing a spatial object reference The API will not create a new dedicated spatial object to reference the observation but will use the given spatial object 0.5.0 - 2022-11-02 # Added # Observation - Respect and use the given UUID when creating a new observation instead of always generate a new one Changed # Installation - improve the installation process and adapt the code for LWC >= 3.5 Logs - Add the user login as a prefix in the API logs if available Docs: Add the entry point /project/{projectKey}/indicator/{indicatorCode}/document/{documentUuid} in the API documentation Remove the useless mention of jDb profile Tests # Unit tests - Add a full dockerized stack with Lizmap Web Client to test the API entry points Add test data (taken from the G-Obs QGIS plugin) Add a QGIS project with the test data and the needed variables Allow to use the make command to run the test stack and import the needed data Add 14 Python unit tests to cover the main API entry points 0.4.1 - 2022-04-22 # Observation - Return the full geometry (Point, Linestring or Polygon) and not the centroid anymore in the \"wkt\" property of the observation. QGIS Project - Get the QGIS PostgreSQL connection name and use it as the name of the PostgreSQL service file to use for the database connection. Installation - Use the new method createEntryPoint to correctly install gobsapi.php CI - Create a release on GitHub after a publishing a tag Docs - Switch to MkDocs 0.4.0 - 2021-07-04 # User - Automatically create an actor in the G-Obs database for the authenticated user Indicator - Automatically create a series for the authenticated user and the given indicator, allowing the user to directly create observations for this indicator Docs - Add installation, configuration & changelog chapters in https://docs.3liz.org/lizmap-gobsapi-module/ 0.3.3 - 2021-03-02 # Observation - Add editable field to let API consumer knows whether the observation can be edited 0.3.2 - 2021-02-10 # Config - Add option to log every API call in Lizmap Web Client default log file Docs - Update README with debug chapter Add CHANGELOG.md file 0.3.1 - 2020-11-01 # Media - Use gobsapi.php URL for project geopackage, indicator documents and observation media Project - Add default maximum extent if project projection unknown Docs - Update README","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#unreleased","text":"","title":"Unreleased"},{"location":"CHANGELOG/#080-2024-07-25","text":"","title":"0.8.0 - 2024-07-25"},{"location":"CHANGELOG/#changed","text":"Compatibility for Lizmap Web Client 3.6 & 3.7 - Remove compatibility for Lizmap Web Client 3.5 Exclude some files from the Composer package","title":"Changed"},{"location":"CHANGELOG/#added","text":"User authentication - Allow the use of Basic authentication for /user/login endpoint When using SAML authentication protocol, add synchronization of Roles and SI (feature taken from the old deprecated module gobs)","title":"Added"},{"location":"CHANGELOG/#fixed","text":"Tools - Better errors catchment when executing SQL queries","title":"Fixed"},{"location":"CHANGELOG/#070-2023-07-25","text":"","title":"0.7.0 - 2023-07-25"},{"location":"CHANGELOG/#changed_1","text":"Projects - remove the link between Lizmap projects and G-Obs project & use the project table Observations - Restrict read & write access based on the user accessible project views","title":"Changed"},{"location":"CHANGELOG/#added_1","text":"Plugin Lizmap compatibility - Add a way to get Lizmap Web Client metadata from G-Obs API","title":"Added"},{"location":"CHANGELOG/#fixed_1","text":"Ensure the entry point gobsapi.php is overwritten on each version upgrade","title":"Fixed"},{"location":"CHANGELOG/#060-2023-03-27","text":"","title":"0.6.0 - 2023-03-27"},{"location":"CHANGELOG/#changed_2","text":"Indicator - Move the dimensions characteristics into a new dedicated table dimension","title":"Changed"},{"location":"CHANGELOG/#051-2023-02-21","text":"","title":"0.5.1 - 2023-02-21"},{"location":"CHANGELOG/#added_2","text":"Observation - Allow to create an observation by passing a spatial object reference The API will not create a new dedicated spatial object to reference the observation but will use the given spatial object","title":"Added"},{"location":"CHANGELOG/#050-2022-11-02","text":"","title":"0.5.0 - 2022-11-02"},{"location":"CHANGELOG/#added_3","text":"Observation - Respect and use the given UUID when creating a new observation instead of always generate a new one","title":"Added"},{"location":"CHANGELOG/#changed_3","text":"Installation - improve the installation process and adapt the code for LWC >= 3.5 Logs - Add the user login as a prefix in the API logs if available Docs: Add the entry point /project/{projectKey}/indicator/{indicatorCode}/document/{documentUuid} in the API documentation Remove the useless mention of jDb profile","title":"Changed"},{"location":"CHANGELOG/#tests","text":"Unit tests - Add a full dockerized stack with Lizmap Web Client to test the API entry points Add test data (taken from the G-Obs QGIS plugin) Add a QGIS project with the test data and the needed variables Allow to use the make command to run the test stack and import the needed data Add 14 Python unit tests to cover the main API entry points","title":"Tests"},{"location":"CHANGELOG/#041-2022-04-22","text":"Observation - Return the full geometry (Point, Linestring or Polygon) and not the centroid anymore in the \"wkt\" property of the observation. QGIS Project - Get the QGIS PostgreSQL connection name and use it as the name of the PostgreSQL service file to use for the database connection. Installation - Use the new method createEntryPoint to correctly install gobsapi.php CI - Create a release on GitHub after a publishing a tag Docs - Switch to MkDocs","title":"0.4.1 - 2022-04-22"},{"location":"CHANGELOG/#040-2021-07-04","text":"User - Automatically create an actor in the G-Obs database for the authenticated user Indicator - Automatically create a series for the authenticated user and the given indicator, allowing the user to directly create observations for this indicator Docs - Add installation, configuration & changelog chapters in https://docs.3liz.org/lizmap-gobsapi-module/","title":"0.4.0 - 2021-07-04"},{"location":"CHANGELOG/#033-2021-03-02","text":"Observation - Add editable field to let API consumer knows whether the observation can be edited","title":"0.3.3 - 2021-03-02"},{"location":"CHANGELOG/#032-2021-02-10","text":"Config - Add option to log every API call in Lizmap Web Client default log file Docs - Update README with debug chapter Add CHANGELOG.md file","title":"0.3.2 - 2021-02-10"},{"location":"CHANGELOG/#031-2020-11-01","text":"Media - Use gobsapi.php URL for project geopackage, indicator documents and observation media Project - Add default maximum extent if project projection unknown Docs - Update README","title":"0.3.1 - 2020-11-01"},{"location":"changelog/","text":"Changelog # Unreleased # 0.8.0 - 2024-07-25 # Changed # Compatibility for Lizmap Web Client 3.6 & 3.7 - Remove compatibility for Lizmap Web Client 3.5 Exclude some files from the Composer package Added # User authentication - Allow the use of Basic authentication for /user/login endpoint When using SAML authentication protocol, add synchronization of Roles and SI (feature taken from the old deprecated module gobs) Fixed # Tools - Better errors catchment when executing SQL queries 0.7.0 - 2023-07-25 # Changed # Projects - remove the link between Lizmap projects and G-Obs project & use the project table Observations - Restrict read & write access based on the user accessible project views Added # Plugin Lizmap compatibility - Add a way to get Lizmap Web Client metadata from G-Obs API Fixed # Ensure the entry point gobsapi.php is overwritten on each version upgrade 0.6.0 - 2023-03-27 # Changed # Indicator - Move the dimensions characteristics into a new dedicated table dimension 0.5.1 - 2023-02-21 # Added # Observation - Allow to create an observation by passing a spatial object reference The API will not create a new dedicated spatial object to reference the observation but will use the given spatial object 0.5.0 - 2022-11-02 # Added # Observation - Respect and use the given UUID when creating a new observation instead of always generate a new one Changed # Installation - improve the installation process and adapt the code for LWC >= 3.5 Logs - Add the user login as a prefix in the API logs if available Docs: Add the entry point /project/{projectKey}/indicator/{indicatorCode}/document/{documentUuid} in the API documentation Remove the useless mention of jDb profile Tests # Unit tests - Add a full dockerized stack with Lizmap Web Client to test the API entry points Add test data (taken from the G-Obs QGIS plugin) Add a QGIS project with the test data and the needed variables Allow to use the make command to run the test stack and import the needed data Add 14 Python unit tests to cover the main API entry points 0.4.1 - 2022-04-22 # Observation - Return the full geometry (Point, Linestring or Polygon) and not the centroid anymore in the \"wkt\" property of the observation. QGIS Project - Get the QGIS PostgreSQL connection name and use it as the name of the PostgreSQL service file to use for the database connection. Installation - Use the new method createEntryPoint to correctly install gobsapi.php CI - Create a release on GitHub after a publishing a tag Docs - Switch to MkDocs 0.4.0 - 2021-07-04 # User - Automatically create an actor in the G-Obs database for the authenticated user Indicator - Automatically create a series for the authenticated user and the given indicator, allowing the user to directly create observations for this indicator Docs - Add installation, configuration & changelog chapters in https://docs.3liz.org/lizmap-gobsapi-module/ 0.3.3 - 2021-03-02 # Observation - Add editable field to let API consumer knows whether the observation can be edited 0.3.2 - 2021-02-10 # Config - Add option to log every API call in Lizmap Web Client default log file Docs - Update README with debug chapter Add CHANGELOG.md file 0.3.1 - 2020-11-01 # Media - Use gobsapi.php URL for project geopackage, indicator documents and observation media Project - Add default maximum extent if project projection unknown Docs - Update README","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#080-2024-07-25","text":"","title":"0.8.0 - 2024-07-25"},{"location":"changelog/#changed","text":"Compatibility for Lizmap Web Client 3.6 & 3.7 - Remove compatibility for Lizmap Web Client 3.5 Exclude some files from the Composer package","title":"Changed"},{"location":"changelog/#added","text":"User authentication - Allow the use of Basic authentication for /user/login endpoint When using SAML authentication protocol, add synchronization of Roles and SI (feature taken from the old deprecated module gobs)","title":"Added"},{"location":"changelog/#fixed","text":"Tools - Better errors catchment when executing SQL queries","title":"Fixed"},{"location":"changelog/#070-2023-07-25","text":"","title":"0.7.0 - 2023-07-25"},{"location":"changelog/#changed_1","text":"Projects - remove the link between Lizmap projects and G-Obs project & use the project table Observations - Restrict read & write access based on the user accessible project views","title":"Changed"},{"location":"changelog/#added_1","text":"Plugin Lizmap compatibility - Add a way to get Lizmap Web Client metadata from G-Obs API","title":"Added"},{"location":"changelog/#fixed_1","text":"Ensure the entry point gobsapi.php is overwritten on each version upgrade","title":"Fixed"},{"location":"changelog/#060-2023-03-27","text":"","title":"0.6.0 - 2023-03-27"},{"location":"changelog/#changed_2","text":"Indicator - Move the dimensions characteristics into a new dedicated table dimension","title":"Changed"},{"location":"changelog/#051-2023-02-21","text":"","title":"0.5.1 - 2023-02-21"},{"location":"changelog/#added_2","text":"Observation - Allow to create an observation by passing a spatial object reference The API will not create a new dedicated spatial object to reference the observation but will use the given spatial object","title":"Added"},{"location":"changelog/#050-2022-11-02","text":"","title":"0.5.0 - 2022-11-02"},{"location":"changelog/#added_3","text":"Observation - Respect and use the given UUID when creating a new observation instead of always generate a new one","title":"Added"},{"location":"changelog/#changed_3","text":"Installation - improve the installation process and adapt the code for LWC >= 3.5 Logs - Add the user login as a prefix in the API logs if available Docs: Add the entry point /project/{projectKey}/indicator/{indicatorCode}/document/{documentUuid} in the API documentation Remove the useless mention of jDb profile","title":"Changed"},{"location":"changelog/#tests","text":"Unit tests - Add a full dockerized stack with Lizmap Web Client to test the API entry points Add test data (taken from the G-Obs QGIS plugin) Add a QGIS project with the test data and the needed variables Allow to use the make command to run the test stack and import the needed data Add 14 Python unit tests to cover the main API entry points","title":"Tests"},{"location":"changelog/#041-2022-04-22","text":"Observation - Return the full geometry (Point, Linestring or Polygon) and not the centroid anymore in the \"wkt\" property of the observation. QGIS Project - Get the QGIS PostgreSQL connection name and use it as the name of the PostgreSQL service file to use for the database connection. Installation - Use the new method createEntryPoint to correctly install gobsapi.php CI - Create a release on GitHub after a publishing a tag Docs - Switch to MkDocs","title":"0.4.1 - 2022-04-22"},{"location":"changelog/#040-2021-07-04","text":"User - Automatically create an actor in the G-Obs database for the authenticated user Indicator - Automatically create a series for the authenticated user and the given indicator, allowing the user to directly create observations for this indicator Docs - Add installation, configuration & changelog chapters in https://docs.3liz.org/lizmap-gobsapi-module/","title":"0.4.0 - 2021-07-04"},{"location":"changelog/#033-2021-03-02","text":"Observation - Add editable field to let API consumer knows whether the observation can be edited","title":"0.3.3 - 2021-03-02"},{"location":"changelog/#032-2021-02-10","text":"Config - Add option to log every API call in Lizmap Web Client default log file Docs - Update README with debug chapter Add CHANGELOG.md file","title":"0.3.2 - 2021-02-10"},{"location":"changelog/#031-2020-11-01","text":"Media - Use gobsapi.php URL for project geopackage, indicator documents and observation media Project - Add default maximum extent if project projection unknown Docs - Update README","title":"0.3.1 - 2020-11-01"},{"location":"configuration/","text":"Configuration # The G-Obs API module is tightly linked to the G-Obs QGIS plugin , and to the use of Lizmap Web Client as the web map publication tool. We write here some help regarding the specific configuration needed for G-Obs API. A full documentation on Lizmap Web Client is available here: https://docs.lizmap.com/ Project # A project in G-Obs corresponds to a QGIS project published to Lizmap, with some specificities: Indicators : In the QGIS Project properties, you need to have a project variable gobs_indicators containing the list of indicators that you want to publish in the project. To do so, open the project properties (CTRL+MAJ+P), go to the Variables tab, and add a new variable: name gobs_indicators and value begining exactly with the term gobs_indicators: , and containing the list of indicator codes separated by comma. For example: gobs_indicators:pluviometry,population will \"publish\" these two indicators (pluviometry and population) with the QGIS project. Connection name : You must also add another QGIS project variable gobs_connection_name containing the name of the PostgreSQL connection name (as written in the QGIS connection configuration dialog). This connection name must be exactly the same as the name of the PostgreSQL service which is used locally (your computer) and in the GobsAPI server . Additionnal spatial data : you can also publish a Geopackage file alongside the project, to be used by any software to display referential spatial layers on the map with the observation data. To do so, just create and save a Geopackage file containing vector layers (and raster layers if needed) named as the QGIS project. For example, if you project file is my_gobs_project.qgs , you must save the Geopackage file in the same folder with the name my_gobs_project.qgs.gpkg . You can create and populate this Geopackage with the QGIS processing tool Package layers accessible with the Processing / Toolbox menu. Indicators # Documents # In the G-Obs database, you can add documents to illustrate each indicator. To do so, the table gobs.document must be filled with appropriate data. An indicator can have different types of documents: document : any document such as PDF, ODT, DOC, DOCX, ZIP file icon : the icon of the indicator (a simple and small image file). Must be a jpeg, jpg, png or gif. image : an image file (photo, illustration) other : any other unspecified type of document preview : the image to be shown as the main illustration of the indicator. Must be a jpeg, jpg, png or gif. video : a video file. url : a URL pointing to an external ressource All the document files must be stored in the API server. The document files must be stored inside a media/gobsapi/documents/ folder, with the media folder located in Lizmap repository root folder. This media folder must be writable. Do it for example with 1 2 chown -R :www-data /srv/data/media chmod 775 -R /srv/data/media For example, if Lizmap Web Client repository root folder is /srv/data/ , the root gobsapi media folder will be /srv/data/media/ and the documents must be stored in /srv/data/media/gobsapi/documents/INDICATOR_CODE/DOCUMENT_TYPE/DOCUMENT_FILE_NAME.EXT , where INDICATOR_CODE is the code of the indicator, for example pluviometry DOCUMENT_TYPE is the type of the document, for example image DOCUMENT_FILE_NAME.EXT is the name of the file, for example a_picture.jpg Two examples: /srv/data/media/gobsapi/documents/pluviometry/image/a_picture.jpg /srv/data/media/gobsapi/documents/population/document/explaining_demography.pdf In the table gobs.document of the G-Obs database , the path must be stored relative to the folder /srv/data/media/gobsapi/documents , and must begin only with the code of the indicator. For example : pluviometry/image/a_picture.jpg population/document/explaining_demography.pdf The API module will then propose a URL to access each document, returned when querying the details of an indicator. Observations # Media # Each observation can have a photo, called media. When uploading this media file with the API entry point /project/PROJECT_CODE/indicator/INDICATOR_CODE/observation/OBSERVATION_UID/uploadMedia , the media file will be stored in the full path /srv/data/media/gobsapi/observations/OBSERVATION_UID.EXT where: INDICATOR_CODE is the code of the indicator, for example pluviometry OBSERVATION_UID is the UUID of the observation, for example e8f0a46c-1d24-456a-925a-387740ade1c6 EXT is the extension of the original file sent, for example jpeg which can build the example path: /srv/data/media/gobsapi/observations/e8f0a46c-1d24-456a-925a-387740ade1c6.jpeg","title":"Configuration"},{"location":"configuration/#configuration","text":"The G-Obs API module is tightly linked to the G-Obs QGIS plugin , and to the use of Lizmap Web Client as the web map publication tool. We write here some help regarding the specific configuration needed for G-Obs API. A full documentation on Lizmap Web Client is available here: https://docs.lizmap.com/","title":"Configuration"},{"location":"configuration/#project","text":"A project in G-Obs corresponds to a QGIS project published to Lizmap, with some specificities: Indicators : In the QGIS Project properties, you need to have a project variable gobs_indicators containing the list of indicators that you want to publish in the project. To do so, open the project properties (CTRL+MAJ+P), go to the Variables tab, and add a new variable: name gobs_indicators and value begining exactly with the term gobs_indicators: , and containing the list of indicator codes separated by comma. For example: gobs_indicators:pluviometry,population will \"publish\" these two indicators (pluviometry and population) with the QGIS project. Connection name : You must also add another QGIS project variable gobs_connection_name containing the name of the PostgreSQL connection name (as written in the QGIS connection configuration dialog). This connection name must be exactly the same as the name of the PostgreSQL service which is used locally (your computer) and in the GobsAPI server . Additionnal spatial data : you can also publish a Geopackage file alongside the project, to be used by any software to display referential spatial layers on the map with the observation data. To do so, just create and save a Geopackage file containing vector layers (and raster layers if needed) named as the QGIS project. For example, if you project file is my_gobs_project.qgs , you must save the Geopackage file in the same folder with the name my_gobs_project.qgs.gpkg . You can create and populate this Geopackage with the QGIS processing tool Package layers accessible with the Processing / Toolbox menu.","title":"Project"},{"location":"configuration/#indicators","text":"","title":"Indicators"},{"location":"configuration/#documents","text":"In the G-Obs database, you can add documents to illustrate each indicator. To do so, the table gobs.document must be filled with appropriate data. An indicator can have different types of documents: document : any document such as PDF, ODT, DOC, DOCX, ZIP file icon : the icon of the indicator (a simple and small image file). Must be a jpeg, jpg, png or gif. image : an image file (photo, illustration) other : any other unspecified type of document preview : the image to be shown as the main illustration of the indicator. Must be a jpeg, jpg, png or gif. video : a video file. url : a URL pointing to an external ressource All the document files must be stored in the API server. The document files must be stored inside a media/gobsapi/documents/ folder, with the media folder located in Lizmap repository root folder. This media folder must be writable. Do it for example with 1 2 chown -R :www-data /srv/data/media chmod 775 -R /srv/data/media For example, if Lizmap Web Client repository root folder is /srv/data/ , the root gobsapi media folder will be /srv/data/media/ and the documents must be stored in /srv/data/media/gobsapi/documents/INDICATOR_CODE/DOCUMENT_TYPE/DOCUMENT_FILE_NAME.EXT , where INDICATOR_CODE is the code of the indicator, for example pluviometry DOCUMENT_TYPE is the type of the document, for example image DOCUMENT_FILE_NAME.EXT is the name of the file, for example a_picture.jpg Two examples: /srv/data/media/gobsapi/documents/pluviometry/image/a_picture.jpg /srv/data/media/gobsapi/documents/population/document/explaining_demography.pdf In the table gobs.document of the G-Obs database , the path must be stored relative to the folder /srv/data/media/gobsapi/documents , and must begin only with the code of the indicator. For example : pluviometry/image/a_picture.jpg population/document/explaining_demography.pdf The API module will then propose a URL to access each document, returned when querying the details of an indicator.","title":"Documents"},{"location":"configuration/#observations","text":"","title":"Observations"},{"location":"configuration/#media","text":"Each observation can have a photo, called media. When uploading this media file with the API entry point /project/PROJECT_CODE/indicator/INDICATOR_CODE/observation/OBSERVATION_UID/uploadMedia , the media file will be stored in the full path /srv/data/media/gobsapi/observations/OBSERVATION_UID.EXT where: INDICATOR_CODE is the code of the indicator, for example pluviometry OBSERVATION_UID is the UUID of the observation, for example e8f0a46c-1d24-456a-925a-387740ade1c6 EXT is the extension of the original file sent, for example jpeg which can build the example path: /srv/data/media/gobsapi/observations/e8f0a46c-1d24-456a-925a-387740ade1c6.jpeg","title":"Media"},{"location":"install/","text":"Installation # Lizmap Web Client gobsapi module # For Lizmap Web Client >= 3.7.x # NB: all the path given in the following sections are relative to your Lizmap Web Client instance folder. SAML # See https://github.com/jelix/saml-module/ 1 2 3 4 5 cd lizmap/my-packages/ composer require \"jelix/saml-module\" cd ../.. php lizmap/install/configurator.php saml php lizmap/install/configurator.php samladmin For more information about configuration, go to https://github.com/jelix/saml-module/ LDAPDAO # See https://github.com/jelix/ldapdao-module 1 2 3 4 cd lizmap/my-packages/ composer require \"jelix/ldapdao-module\" cd ../.. php lizmap/install/configurator.php ldapdao For more information about configuration, go to https://github.com/jelix/ldapdao-module GOBSAPI # Get the module with composer 1 2 3 4 5 cd lizmap/my-packages/ composer require \"lizmap/lizmap-gobsapi-module\" cd ../.. php lizmap/install/configurator.php gobsapi Run the installer script # Then you need to run the Lizmap installer 1 2 3 lizmap/install/set_rights.sh lizmap/install/clean_vartmp.sh php lizmap/install/installer.php Authentication driver # If your Lizmap Web Client uses SAMLv2 with the module saml to authenticate the users, you need to force the gobsapi module to use another driver, for example ldapdao . The SAML protocol is based on URL redirections, which are not suitable for the G-Obs API end point. You can override the configuration to force the gobsapi.php entry point to use another driver. To do so, you must first edit the file lizmap/var/config/localconfig.ini.php and change the content of the following sections: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 [modules] ; deactivate ldapdao ldapdao.enabled = off ; deactivate multiauth multiauth.enabled = off ; activate saml saml.enabled = on ; activate samladmin samladmin.enabled = on saml.localconf = 1 samladmin.localconf = 1 ; activate gobsapi gobsapi.enabled = on gobsapi.localconf = 1 ldapdao.localconf = 1 jcommunity.installparam[eps] = \"[index,admin]\" jcommunity.installparam[manualconfig] = off jcommunity.installparam[defaultusers] = [coordplugin_auth] ; use the driver saml driver = saml [coordplugins] lizmap = lizmapConfig.ini.php auth.class = samlCoordPlugin ; gobsapi configuration for SAML group synchronization [gobsapi] adminSAMLGobsRoleName[] = ROLE_GOBS_ADMIN adminSAMLGobsRoleName[] = GOBS_ADMIN We have then activated the SAML auth for the entry points index and admin . Now we must activate another driver for the gobsapi entry point, by editing the file lizmap/var/config/gobsapi/config.ini.php : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 [modules] ldapdao.enabled = on multiauth.enabled = off samladmin.enabled = off saml.enabled = off saml.localconf = 1 samladmin.localconf = 1 gobsapi.enabled = on gobsapi.localconf = 1 ldapdao.localconf = 1 [coordplugin_auth] driver = ldapdao [coordplugins] jacl2 = 1 auth = \"index/auth.coord.ini.php\" [coordplugin_jacl2] on_error = 2 error_message = \"jacl2~errors.action.right.needed\" on_error_action = \"jelix~error:badright\" You may need to change the file lizmap/var/config/localurls.xml . Check its content is like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?xml version=\"1.0\" encoding=\"utf-8\"?> <urls xmlns= \"http://jelix.org/ns/urls/1.0\" > <entrypoint name= \"index\" default= \"true\" > <url include= \"urls.xml\" module= \"saml\" pathinfo= \"/saml\" /> <url module= \"ldapdao\" pathinfo= \"/ldapdao\" /> </entrypoint> <entrypoint name= \"admin\" > <url include= \"urls.xml\" module= \"saml\" pathinfo= \"/saml\" /> <url include= \"urls.xml\" module= \"samladmin\" pathinfo= \"/samladmin\" /> </entrypoint> <entrypoint name= \"gobsapi\" type= \"classic\" > <url include= \"urls.xml\" module= \"gobsapi\" pathinfo= \"/gobsapi\" /> </entrypoint> <entrypoint name= \"cmdline\" type= \"cmdline\" /> </urls> After this configuration, apply with the following commands: 1 2 3 4 lizmap/install/clean_vartmp.sh lizmap/install/set_rights.sh php lizmap/install/installer.php lizmap/install/set_rights.sh Test the API # Then you are ready to test. For example with curl (you need curl to pass JWT token in Authorization header). Full API Documentation is available: https://docs.3liz.org/lizmap-gobsapi-module/api/ You can find examples in the tests folder In the following examples, we use http://lizmap.localhost/ as the base URL: Define the API base URL: 1 BASEURL = \"http://lizmap.localhost/gobsapi.php\" User # Log in 1 2 3 4 5 6 # login # we get the authentication TOKEN variable by first log the user in TOKEN = $( curl -s -X GET -H 'Content-Type: application/json' \" $BASEURL /user/login?username=gobsapi_writer&password=al_password\" | jq -r '.token' ) && echo $TOKEN # OR # we can use Basic authentication to avoid using username & password in the URL TOKEN = $( curl -s -X GET -H 'Content-Type: application/json' -u \"gobsapi_writer:al_password\" \" $BASEURL /user/login\" | jq -r '.token' ) && echo $TOKEN returns the token, for example 1 dacf5135c6686417c3916a649adbd146 Get the user projects 1 2 3 # User Projects # we use the $TOKEN variable in the Authorization header echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" $BASEURL /user/projects ) Log out 1 2 # logUserOut echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" $BASEURL /user/logout ) Project # Get a project details 1 2 # getProjectByKey echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" $BASEURL /project/test_project_a ) Get the list of indicators 1 2 # getProjectIndicators echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" $BASEURL /project/test_project_a/indicators ) returns Get the project Geopackage 1 2 # getProjectGeopackage curl -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/geopackage --output /tmp/test.gpkg returns the binary file and save it to /tmp/test.gpkg Indicator # Get an indicator data * 1 2 # getIndicatorByCode echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" $BASEURL /project/test_project_a/indicator/hiker_position ) ` Get the observation of a given indicator between two dates 1 2 3 # getObservationsByIndicator # between seven days ago and now echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"lastSyncDate: $( date '+%Y-%m-%d %H:%M:%S' -d '7 days ago' ) \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/observations ) returns all the matching observations. Get the deleted observation on the server between two dates 1 2 # getDeletedObservationsByIndicator echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"lastSyncDate: $( date '+%Y-%m-%d %H:%M:%S' -d '13 days ago' ) \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/deletedObservations ) returns a list of the deleted observation uids 1 [ \"98020996-2dec-4cbe-93d7-c2ba1b43b871\" , \"230d5b17-96b3-4bad-8c78-6379f1e9b1c6\" , \"ced021b2-6eda-4a80-8903-b013291a6b2d\" , \"2d198922-5cd0-4d0f-bc96-dfcc17c01ced\" , \"1fc001b6-c147-49ef-ae6e-66f8ea5e0b39\" ] Get the indicator documents 1 2 # getIndicatorDocument curl -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/document/946fee64-e86c-40fa-a55e-8d9ad3579734 --output /tmp/test.jpeg Observation # Create a new observation * 1 2 # createObservation echo $( curl -X POST -H \"Accept: application/json\" -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" -H \"Content-Type: application/json\" -d \"{\\\"id\\\":null,\\\"indicator\\\":\\\"hiker_position\\\",\\\"uuid\\\":null,\\\"start_timestamp\\\":\\\"2019-07-19 03:30:00\\\",\\\"end_timestamp\\\":null,\\\"coordinates\\\":{\\\"x\\\":-3.785956510771293,\\\"y\\\":48.4744332531894},\\\"wkt\\\":\\\"POINT(-3.78595651077129 48.4744332531894)\\\",\\\"values\\\":[125],\\\"photo\\\":null,\\\"created_at\\\":null,\\\"updated_at\\\":null}\" \" $BASEURL /project/test_project_a/indicator/hiker_position/observation\" ) Update an existing observation 1 2 # updateObservation echo $( curl -X PUT -H \"Accept: application/json\" -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" -H \"Content-Type: application/json\" -d \"{\\\"id\\\":1,\\\"indicator\\\":\\\"hiker_position\\\",\\\"uuid\\\":\\\"e8f0a46c-1d24-456a-925a-387740ade1c6\\\",\\\"start_timestamp\\\":\\\"2019-07-16 03:35:00\\\",\\\"end_timestamp\\\":null,\\\"coordinates\\\":{\\\"x\\\":-3.785956510771293,\\\"y\\\":48.4744332531894},\\\"wkt\\\":\\\"POINT(-3.78595651077999 48.4744332531999)\\\",\\\"values\\\":[1.2],\\\"photo\\\":null,\\\"created_at\\\":\\\"2020-12-03 15:04:40\\\",\\\"updated_at\\\":\\\"2020-12-03 17:55:59\\\"}\" \" $BASEURL /project/test_project_a/indicator/hiker_position/observation\" ) Get an observation data 1 2 # getObservationById echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/observation/e8f0a46c-1d24-456a-925a-387740ade1c6 ) Delete an observation 1 2 # deleteObservationById echo $( curl -X DELETE -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/observation/e8f0a46c-1d24-456a-925a-387740ade1c6 ) Observation media # Upload a media for a given observation 1 2 # uploadObservationMedia echo $( curl -X POST -H \"Accept: application/json\" -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" -H \"Content-Type: multipart/form-data\" -F \"mediaFile=@/home/mdouchin/Documents/3liz/mdouchin_carre.jpeg;type=image/jpeg\" $BASEURL /project/test_project_a/indicator/hiker_position/observation/e8f0a46c-1d24-456a-925a-387740ade1c6/uploadMedia ) Delete an observation media 1 2 # deleteObservationMedia echo $( curl -X DELETE -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/observation/e8f0a46c-1d24-456a-925a-387740ade1c6/deleteMedia ) Download an observation media 1 2 # getObservationMedia curl -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/observation/e8f0a46c-1d24-456a-925a-387740ade1c6/media --output /tmp/test.jpeg returns the media file in binary and save it to /tmp/test.jpeg Debug # You can activate the debug mode by manually editing the configuration file lizmap/var/config/gobsapi.ini.php and modify the variable log_api_calls' with the debug` value: 1 2 [gobsapi] log_api_calls = debug You will then be able to see the API calls log written in the file lizmap/var/log/messages.log 1 tail -f lizmap/var/log/messages.log Messages will be like 1 2 3 4 5 6 7 2021-02-09 17:18:52 127.0.0.1 default GOBSAPI - ################ 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - path: getProjectByKey 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - input_data: {\"projectKey\":\"lizmapdemo~a_fake_project\",\"module\":\"gobsapi\",\"action\":\"project:getProjectByKey\"} 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - http_code: 404 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - status: error 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - message: The given project key does not refer to a known project 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - ################","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#lizmap-web-client-gobsapi-module","text":"","title":"Lizmap Web Client gobsapi module"},{"location":"install/#for-lizmap-web-client-37x","text":"NB: all the path given in the following sections are relative to your Lizmap Web Client instance folder.","title":"For Lizmap Web Client &gt;= 3.7.x"},{"location":"install/#saml","text":"See https://github.com/jelix/saml-module/ 1 2 3 4 5 cd lizmap/my-packages/ composer require \"jelix/saml-module\" cd ../.. php lizmap/install/configurator.php saml php lizmap/install/configurator.php samladmin For more information about configuration, go to https://github.com/jelix/saml-module/","title":"SAML"},{"location":"install/#ldapdao","text":"See https://github.com/jelix/ldapdao-module 1 2 3 4 cd lizmap/my-packages/ composer require \"jelix/ldapdao-module\" cd ../.. php lizmap/install/configurator.php ldapdao For more information about configuration, go to https://github.com/jelix/ldapdao-module","title":"LDAPDAO"},{"location":"install/#gobsapi","text":"Get the module with composer 1 2 3 4 5 cd lizmap/my-packages/ composer require \"lizmap/lizmap-gobsapi-module\" cd ../.. php lizmap/install/configurator.php gobsapi","title":"GOBSAPI"},{"location":"install/#run-the-installer-script","text":"Then you need to run the Lizmap installer 1 2 3 lizmap/install/set_rights.sh lizmap/install/clean_vartmp.sh php lizmap/install/installer.php","title":"Run the installer script"},{"location":"install/#authentication-driver","text":"If your Lizmap Web Client uses SAMLv2 with the module saml to authenticate the users, you need to force the gobsapi module to use another driver, for example ldapdao . The SAML protocol is based on URL redirections, which are not suitable for the G-Obs API end point. You can override the configuration to force the gobsapi.php entry point to use another driver. To do so, you must first edit the file lizmap/var/config/localconfig.ini.php and change the content of the following sections: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 [modules] ; deactivate ldapdao ldapdao.enabled = off ; deactivate multiauth multiauth.enabled = off ; activate saml saml.enabled = on ; activate samladmin samladmin.enabled = on saml.localconf = 1 samladmin.localconf = 1 ; activate gobsapi gobsapi.enabled = on gobsapi.localconf = 1 ldapdao.localconf = 1 jcommunity.installparam[eps] = \"[index,admin]\" jcommunity.installparam[manualconfig] = off jcommunity.installparam[defaultusers] = [coordplugin_auth] ; use the driver saml driver = saml [coordplugins] lizmap = lizmapConfig.ini.php auth.class = samlCoordPlugin ; gobsapi configuration for SAML group synchronization [gobsapi] adminSAMLGobsRoleName[] = ROLE_GOBS_ADMIN adminSAMLGobsRoleName[] = GOBS_ADMIN We have then activated the SAML auth for the entry points index and admin . Now we must activate another driver for the gobsapi entry point, by editing the file lizmap/var/config/gobsapi/config.ini.php : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 [modules] ldapdao.enabled = on multiauth.enabled = off samladmin.enabled = off saml.enabled = off saml.localconf = 1 samladmin.localconf = 1 gobsapi.enabled = on gobsapi.localconf = 1 ldapdao.localconf = 1 [coordplugin_auth] driver = ldapdao [coordplugins] jacl2 = 1 auth = \"index/auth.coord.ini.php\" [coordplugin_jacl2] on_error = 2 error_message = \"jacl2~errors.action.right.needed\" on_error_action = \"jelix~error:badright\" You may need to change the file lizmap/var/config/localurls.xml . Check its content is like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?xml version=\"1.0\" encoding=\"utf-8\"?> <urls xmlns= \"http://jelix.org/ns/urls/1.0\" > <entrypoint name= \"index\" default= \"true\" > <url include= \"urls.xml\" module= \"saml\" pathinfo= \"/saml\" /> <url module= \"ldapdao\" pathinfo= \"/ldapdao\" /> </entrypoint> <entrypoint name= \"admin\" > <url include= \"urls.xml\" module= \"saml\" pathinfo= \"/saml\" /> <url include= \"urls.xml\" module= \"samladmin\" pathinfo= \"/samladmin\" /> </entrypoint> <entrypoint name= \"gobsapi\" type= \"classic\" > <url include= \"urls.xml\" module= \"gobsapi\" pathinfo= \"/gobsapi\" /> </entrypoint> <entrypoint name= \"cmdline\" type= \"cmdline\" /> </urls> After this configuration, apply with the following commands: 1 2 3 4 lizmap/install/clean_vartmp.sh lizmap/install/set_rights.sh php lizmap/install/installer.php lizmap/install/set_rights.sh","title":"Authentication driver"},{"location":"install/#test-the-api","text":"Then you are ready to test. For example with curl (you need curl to pass JWT token in Authorization header). Full API Documentation is available: https://docs.3liz.org/lizmap-gobsapi-module/api/ You can find examples in the tests folder In the following examples, we use http://lizmap.localhost/ as the base URL: Define the API base URL: 1 BASEURL = \"http://lizmap.localhost/gobsapi.php\"","title":"Test the API"},{"location":"install/#user","text":"Log in 1 2 3 4 5 6 # login # we get the authentication TOKEN variable by first log the user in TOKEN = $( curl -s -X GET -H 'Content-Type: application/json' \" $BASEURL /user/login?username=gobsapi_writer&password=al_password\" | jq -r '.token' ) && echo $TOKEN # OR # we can use Basic authentication to avoid using username & password in the URL TOKEN = $( curl -s -X GET -H 'Content-Type: application/json' -u \"gobsapi_writer:al_password\" \" $BASEURL /user/login\" | jq -r '.token' ) && echo $TOKEN returns the token, for example 1 dacf5135c6686417c3916a649adbd146 Get the user projects 1 2 3 # User Projects # we use the $TOKEN variable in the Authorization header echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" $BASEURL /user/projects ) Log out 1 2 # logUserOut echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" $BASEURL /user/logout )","title":"User"},{"location":"install/#project","text":"Get a project details 1 2 # getProjectByKey echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" $BASEURL /project/test_project_a ) Get the list of indicators 1 2 # getProjectIndicators echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" $BASEURL /project/test_project_a/indicators ) returns Get the project Geopackage 1 2 # getProjectGeopackage curl -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/geopackage --output /tmp/test.gpkg returns the binary file and save it to /tmp/test.gpkg","title":"Project"},{"location":"install/#indicator","text":"Get an indicator data * 1 2 # getIndicatorByCode echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" $BASEURL /project/test_project_a/indicator/hiker_position ) ` Get the observation of a given indicator between two dates 1 2 3 # getObservationsByIndicator # between seven days ago and now echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"lastSyncDate: $( date '+%Y-%m-%d %H:%M:%S' -d '7 days ago' ) \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/observations ) returns all the matching observations. Get the deleted observation on the server between two dates 1 2 # getDeletedObservationsByIndicator echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"lastSyncDate: $( date '+%Y-%m-%d %H:%M:%S' -d '13 days ago' ) \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/deletedObservations ) returns a list of the deleted observation uids 1 [ \"98020996-2dec-4cbe-93d7-c2ba1b43b871\" , \"230d5b17-96b3-4bad-8c78-6379f1e9b1c6\" , \"ced021b2-6eda-4a80-8903-b013291a6b2d\" , \"2d198922-5cd0-4d0f-bc96-dfcc17c01ced\" , \"1fc001b6-c147-49ef-ae6e-66f8ea5e0b39\" ] Get the indicator documents 1 2 # getIndicatorDocument curl -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/document/946fee64-e86c-40fa-a55e-8d9ad3579734 --output /tmp/test.jpeg","title":"Indicator"},{"location":"install/#observation","text":"Create a new observation * 1 2 # createObservation echo $( curl -X POST -H \"Accept: application/json\" -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" -H \"Content-Type: application/json\" -d \"{\\\"id\\\":null,\\\"indicator\\\":\\\"hiker_position\\\",\\\"uuid\\\":null,\\\"start_timestamp\\\":\\\"2019-07-19 03:30:00\\\",\\\"end_timestamp\\\":null,\\\"coordinates\\\":{\\\"x\\\":-3.785956510771293,\\\"y\\\":48.4744332531894},\\\"wkt\\\":\\\"POINT(-3.78595651077129 48.4744332531894)\\\",\\\"values\\\":[125],\\\"photo\\\":null,\\\"created_at\\\":null,\\\"updated_at\\\":null}\" \" $BASEURL /project/test_project_a/indicator/hiker_position/observation\" ) Update an existing observation 1 2 # updateObservation echo $( curl -X PUT -H \"Accept: application/json\" -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" -H \"Content-Type: application/json\" -d \"{\\\"id\\\":1,\\\"indicator\\\":\\\"hiker_position\\\",\\\"uuid\\\":\\\"e8f0a46c-1d24-456a-925a-387740ade1c6\\\",\\\"start_timestamp\\\":\\\"2019-07-16 03:35:00\\\",\\\"end_timestamp\\\":null,\\\"coordinates\\\":{\\\"x\\\":-3.785956510771293,\\\"y\\\":48.4744332531894},\\\"wkt\\\":\\\"POINT(-3.78595651077999 48.4744332531999)\\\",\\\"values\\\":[1.2],\\\"photo\\\":null,\\\"created_at\\\":\\\"2020-12-03 15:04:40\\\",\\\"updated_at\\\":\\\"2020-12-03 17:55:59\\\"}\" \" $BASEURL /project/test_project_a/indicator/hiker_position/observation\" ) Get an observation data 1 2 # getObservationById echo $( curl -X GET -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/observation/e8f0a46c-1d24-456a-925a-387740ade1c6 ) Delete an observation 1 2 # deleteObservationById echo $( curl -X DELETE -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/observation/e8f0a46c-1d24-456a-925a-387740ade1c6 )","title":"Observation"},{"location":"install/#observation-media","text":"Upload a media for a given observation 1 2 # uploadObservationMedia echo $( curl -X POST -H \"Accept: application/json\" -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" -H \"Content-Type: multipart/form-data\" -F \"mediaFile=@/home/mdouchin/Documents/3liz/mdouchin_carre.jpeg;type=image/jpeg\" $BASEURL /project/test_project_a/indicator/hiker_position/observation/e8f0a46c-1d24-456a-925a-387740ade1c6/uploadMedia ) Delete an observation media 1 2 # deleteObservationMedia echo $( curl -X DELETE -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/observation/e8f0a46c-1d24-456a-925a-387740ade1c6/deleteMedia ) Download an observation media 1 2 # getObservationMedia curl -H 'Accept: application/json' -H \"Authorization: Bearer ${ TOKEN } \" -H \"requestSyncDate: $( date '+%Y-%m-%d %H:%M:%S' ) \" $BASEURL /project/test_project_a/indicator/hiker_position/observation/e8f0a46c-1d24-456a-925a-387740ade1c6/media --output /tmp/test.jpeg returns the media file in binary and save it to /tmp/test.jpeg","title":"Observation media"},{"location":"install/#debug","text":"You can activate the debug mode by manually editing the configuration file lizmap/var/config/gobsapi.ini.php and modify the variable log_api_calls' with the debug` value: 1 2 [gobsapi] log_api_calls = debug You will then be able to see the API calls log written in the file lizmap/var/log/messages.log 1 tail -f lizmap/var/log/messages.log Messages will be like 1 2 3 4 5 6 7 2021-02-09 17:18:52 127.0.0.1 default GOBSAPI - ################ 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - path: getProjectByKey 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - input_data: {\"projectKey\":\"lizmapdemo~a_fake_project\",\"module\":\"gobsapi\",\"action\":\"project:getProjectByKey\"} 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - http_code: 404 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - status: error 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - message: The given project key does not refer to a known project 2021-02-09 17:19:05 127.0.0.1 default GOBSAPI - ################","title":"Debug"}]}